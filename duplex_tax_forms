#!/usr/bin/python3
#
# The MIT License (MIT)
# Copyright (c) 2016 Andrew Lutomirski
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import subprocess
import sys
import xml.etree.ElementTree
import PyPDF2

print('''duplex_tax_forms by Andy Lutomirski

This takes a PDF of tax forms and inserts blank pages so that you can print
it double-sided without having two different forms on opposite sides of the
same physical page.

I make no guarantees that it works or that it produces output acceptable to
any particular tax authorities.  It appears to work on my taxes when I supply
a PDF generated by TurboTax as input.''')

if len(sys.argv) != 3:
    print('\nUsage: make_duplex.py INFILE OUTFILE\n')
    exit(1)
infile=sys.argv[1]
outfile=sys.argv[2]

"""Yields all page numbers in the outline."""
def marks(pdf, outline):
    if isinstance(outline, PyPDF2.generic.Destination):
        yield pdf.getDestinationPageNumber(outline)
    else:
        for o in outline:
            yield from marks(pdf, o)

source = PyPDF2.PdfFileReader(infile)

bookmarks = set(marks(source, source.outlines))
if len(bookmarks) == 0:
    print('Error: The input file has no bookmarks')
    exit(1)

dest = PyPDF2.PdfFileWriter()

pages_read=0
pages_written=0
num_source_pages = source.getNumPages()
while pages_read < num_source_pages:
    if pages_read in bookmarks and pages_written % 2 == 1:
        dest.addBlankPage()
        pages_written += 1

    dest.addPage(source.getPage(pages_read))
    pages_read += 1
    pages_written += 1

with open(outfile, 'xb') as f:
    dest.write(f)

print('Done.  Inserted %d blank pages.' % (pages_written - pages_read))
